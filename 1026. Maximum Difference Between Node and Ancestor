# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxAncestorDiff(self, root: Optional[TreeNode]) -> int:
        # If the tree is empty
        if not root:
            return 0
        
        self.diff = 0
        self.find_subtree_diff(root, root.val, root.val) # Update self.diff with Max diff
        return self.diff

    def find_subtree_diff(self, root, min_val, max_val):
        if not root:
            return 
        
        self.diff = max(self.diff, max(abs(min_val - root.val), 
                            abs(max_val - root.val))
                )
        
        # Update min and max values
        min_val = min(min_val, root.val)
        max_val = max(max_val, root.val)

        # Recursion
        self.find_subtree_diff(root.left, min_val, max_val)
        self.find_subtree_diff(root.right, min_val, max_val)
